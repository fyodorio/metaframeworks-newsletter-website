---
import { getCollection } from 'astro:content';

import WideLayout from '../layouts/ContentWide.astro';
import Layout from '../layouts/ContentNarrow.astro';

// Fetch the metaframeworks collection
const metaframeworks = await getCollection('metaframeworks');

// Function to convert camelCase or snake_case to human-readable titles
const toTitleCase = (str) => {
  return str
    .replace(/([A-Z])/g, ' $1') // Add space before capital letters
    .replace(/_/g, ' ') // Replace underscores with spaces
    .replace(/\./g, ' ') // Replace dots with spaces
    .trim() // Remove leading/trailing spaces
    .replace(/^\w/, (c) => c.toUpperCase()); // Capitalize the first letter
};

// Configuration for field result classes
const fieldClassConfig = {
  enterpriseReadiness: { good: 'High', bad: 'Low' },
  complexityLevel: { good: 'Low', bad: 'High' },
  scalabilityLevel: { good: 'High', bad: 'Low' },
  bundleSizeLevel: { good: 'Low', bad: 'High' },
  batteriesIncludedLevel: { good: 'High', bad: 'Low' },
  documentationQuality: { good: 'High', bad: 'Low' },
  thoughtLeadershipImpact: { good: 'High', bad: 'Low' },
  securityByDefaultLevel: { good: 'High', bad: 'Low' }
};

// Helper function to determine the result class
const getResultClass = (field: string, value: string) => {
  const config = fieldClassConfig[field];
  if (!config) return '';

  if (value === config.good) return 'result-good';
  if (value === 'Medium') return 'result-mediocre';
  if (value === config.bad) return 'result-bad';
  return '';
};

// Extract field names from the first entry (assuming all entries have the same structure)
const fieldNames = Object.keys(metaframeworks[0]?.data || {}).filter(
  (item) => item !== 'id' && item !== 'description'
);
---

<WideLayout
  title="Comparison"
  description="Features of modern metaframeworks side by side"
  heroImage="/page-covers/comparison.png"
>
  <div class="table-container">
    <table id="comparison-table">
      <thead>
        <tr>
          {
            fieldNames.map((field) => (
              <th data-field={field} class="sortable">
                {toTitleCase(field)}
                <span class="sort-icon">
                  <svg
                    class="sort-default"
                    viewBox="0 0 24 24"
                    width="1em"
                    height="1em"
                  >
                    <path
                      fill="rgba(255, 255, 255, 0.6)"
                      d="M12 3.67l5 5-1.41 1.41L13 7.5V17h-2V7.5L8.41 10.08 7 8.67l5-5M12 20.33l-5-5 1.41-1.41L11 16.5V7h2v9.5l2.59-2.58L17 15.33l-5 5z"
                    />
                  </svg>
                </span>
              </th>
            ))
          }
        </tr>
      </thead>
      <tbody>
        {
          metaframeworks.map((framework) => (
            <tr>
              {fieldNames.map((field) => {
                const value = framework.data[field];
                return (
                  <td class={getResultClass(field, value)}>
                    {Array.isArray(value) ? (
                      value.join(', ')
                    ) : field === 'officialSite' ||
                      field === 'codeRepository' ? (
                      <span
                        set:html={`<a href="${value}" target="_blank">${value}</a>`}
                      />
                    ) : (
                      value
                    )}
                  </td>
                );
              })}
            </tr>
          ))
        }
      </tbody>
    </table>
  </div>

  <script>
    import { initializeSort } from '../utils/sorting.js';
    initializeSort();
  </script>
</WideLayout>

<style>
  .table-container {
    position: relative;
    overflow-x: auto;
    width: 100%;
  }

  /* Sticky first column */
  #comparison-table th:first-child,
  #comparison-table td:first-child {
    position: sticky;
    left: 0;
    z-index: 1;
  }

  /* White background for header */
  #comparison-table th:first-child {
    background-color: var(--accent);
    z-index: 2;
  }

  /* White background for odd rows */
  #comparison-table tbody > tr:nth-child(odd) td:first-child {
    background-color: #f9f9f9;
  }

  /* White background for even rows */
  #comparison-table tbody > tr:nth-child(even) td:first-child {
    background-color: white;
  }

  /* Result colors */
  .result-good {
    background-color: #d0edd780;
  }
  .result-mediocre {
    background-color: #fff1ab80;
  }
  .result-bad {
    background-color: #ffb4b480;
  }

  .sortable {
    cursor: pointer;
    user-select: none;
  }

  .sortable:hover {
    background-color: rgba(var(--gray), 0.1);
  }

  .sort-icon {
    display: inline-flex;
    align-items: center;
    margin-left: 0.5em;
    height: 1em;
    width: 1em;
    vertical-align: middle;
  }

  /* Add a subtle shadow to indicate scrolling */
  #comparison-table td:first-child::after,
  #comparison-table th:first-child::after {
    content: '';
    position: absolute;
    top: 0;
    right: -5px;
    height: 100%;
    width: 5px;
    background: linear-gradient(to right, rgba(0, 0, 0, 0.1), transparent);
    pointer-events: none;
  }
</style>
